Last Updated 2017/03/29
Patch Tapestry Changelog

v.0.1.0: (legacy)
	-Created with backup (default) function only.
	-Configuration by variable block at head of source code

v.0.1.1: (legacy)
	-Added Recovery Mode
	-First Public Testing Release
	
v.0.2.0 (legacy):
	-Not compatable with backups generated by previous versions
	-Bugfixes:
		-Fixed bug where large backup queues failed to divide into adequate number of blocks
		-Fixed a race condition in blockbuild() that allowed for an infinite loop
	-Silence GPG calls using Python-GnuPG module.
	-General Code Improvements:
		-Replaced fetchSecretKey and findKey/mounKey with single function.
		-Replaced plaintext backup option with key generation prompt
		-append newline to some raw_input calls for cleaner UI
		-implemented error handling, esp. for the known tempfile bug
	-Replaced config block with config file "tapestry.cfg"
		-Human-Editable file generated with module configparser.
		-includes username and computer label variables
		-Allows the user to define block sizes for different use cases (BluRay-ROM, tape, etc)
		-defines the categories and category-root directories in both *nix and windows filesystems
		-defines which categories are default and which are to be used in inclusive mode
	-replaced the init arguments:
		-"--setup" launches the program in config mode.
		-"--inc" launches the program in backup mode, functioning inclusively (across all categories)
		-"--rcv" launches in recovery mode, as before.
	-added Debugging Mode!
		-called with "--debug" flag
		-activates a series of debugging functions that display additional information during program operation. Not
		 user-friendly.

v.0.2.1 (legacy):
	-Improved debugging output with clarifications
	-Added "expected fingerprint" value for the DR key to help minimize key mismatches
	-Added automated signing and verification
		-default signing mode toggled in "--setup"
		-automatically signs blocks with the key indicated in setup
		-verifies the signature for blocks read in -rcv mode. If the signature can't be sufficiently verified, asks the
		 user whether or not to continue
		-full documentation in readme
	-Added skipped file logging
		-a list of files too large to fit into the user-defined block is now generated and saved together with the
		packaged blocks on the desktop

v0.2.2 (release):
	-Now possible to allow a "keyring-only mode", which skips keyloading/keyremoval.
	-Fixed bug in recovery that would crash Tapestry on an unknown category.
	-Organization improvements: outputs moved to a subdirectory on the desktop, rather than loose.
	-Script will now check to see if loopback pinentry is enabled. If it is not, it will ask the user for permission to
	add it, or disable signing-by-default.

v0.3.0 (legacy):
    -Multiprocessing is now used for some steps of operation.
    --Decision was made to improve performance.
    -Discontinued the use of bz2 compression for performance reasons. Increased op time unjustified.
    -Changed structure of the compression operation, may lead to performance impacts. See readme
    -Recovery pickle is now added to all blocks(old was block1).
    -Minor fixes to various naming systems.

v1.0 (legacy):
    -Killed KeyringMode=False with fire.
    -The `--setup` flag is now deprecated. Please avoid use.
    -Removed internal requests for pin/passphrase to force pinentry popout.
    -Switched to UUIDs for the FID value, rather than a counter.
    --Eliminates Collisions
    -Fixed an issue with the blockbuild process that could generate empty blocks pointlessly.
    -Added `--genKey`, the new-key generation call.
    -Began implementation of unit testing.
    -Added "recovery path" to configuration file for testing purposes.
    -Added "output path" to configuration file for user config.
    -Returned bz2 compression in the form of the comTasker. Configured in the config.

v1.0.1 (legacy):
    -Fixed an issue with the globally-declared "version" variable which prevented the program from functioning.

v1.1.0 (legacy):
    - Added a shebang to tapestry to make it immediately executable similar to a bash script.
    - Improved error handling to close issue #1 - missing keys are now correctly excepted.
    - Closed the security issue which could result in recovery from unauthenticated blocks without warning the user.
    - Improved log formatting in the test scripts.
    - Improved memory allocation during compression/decompression operations.
    - Removed the limitation on workers which was previously imposed by blocksize vs. available RAM.
    - Rewrote the testing framework to close issue #5 - Test are now a suite, refer to the documenation.
    - Added backup-to and recovery-via FTP with TLS support. Review the documentation.

v 2.0.0 (legacy):
    - Rewritten from the ground up to leverage return-oriented design principals.
    -- addresses the issue with windows introduced in 0.3.0!
    - Tapestry is now packaged as a module and installed and invoked as such.
    - Places the (currently unutilized) integrity testing task classes into `classes.py` for future use.

v 2.0.1 (legacy):
    - Issue 12: rectified an NS attribute error that was causing runs with the genKey flag set to use the previous key
    (if any) rather than the newly-generated key
    - Issue 13: Changed the behaviour for the creation of category directories to improve error handling in cases where
    the parent directory of a category is missing.

v 2.1.0 (legacy):
    - Test Framework Redesign - better test coverage means more reliable software
    - Updated documentation to facilitate security review and additional development efforts.
    - Added new functionality surrounding file validation, either on-demand or at runtime.
        - add `Build-Time File Validation: True` to your config file to activate.
        - demand-validate specific block files with `--validate` (requires decryption)
    - Fixed an unreported bug introduced in v2.0.0 that caused an error message at runtime.
    - If no `-c` config file path is provided, tapestry will look for `tapestry.cfg` in the current working directory.
        - If that file is also not found, Tapestry will generate a config file with sane defaults and save it in that
          location.
    - Deprecates all former network functionality; this is being replaced with new SFTP functionality.
        - Deemed acceptable as FTP/S is a rare arrangement by comparison to SFTP.
        - This requires new fields be added to your configuration file.
        - Stashing on network shared drives still possible.
    - Adds SFTP functionality
    - Restores the logger functionality. Future logging improvements likely, but the original functionality of logging
      skipped files should be restored.
    - Issue 19: Tapestry will crash upon encountering a file it cannot operate against, such as a broken symlink.
      EricaPomme supplied a new function that will address this.

v 2.1.1 (release):
    - Fixes a bug reported as issue #25 which prevented Tapestry from placing its own config template.
    - Fixes an unreported bug that prevented SFTP operation on modern versions of Paramiko.
    - A change of environment has permanently broken the test for the >0.3.0 recovery index methods. This could break
      compatability with verions prior to v1.0.0. It is recommended you rebaseline with a modern version of Tapestry.
      Future support for the PKL recovery method is deprecated and the code will eventually be removed.