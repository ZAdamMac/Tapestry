===============================================================================
This is a log of tests run against some version of Tapestry by the 
positive-tests.py testing utility. The date is indicated in the filename. 
It should be made clear that these tests do not indicate any sort of warranty 
or guarantee of merchantability.

=======TEST MACHINE SPECS=======
Cores Available: 8 
Operating System: Linux 
RAM Available: 15720 MB 
================================



================================BEGIN TESTING==================================
----------------------------[Positive Unit Tests]-----------------------------

This log is for a test of a development version of Tapestry, with SHA256 hash:

60031e24f91be93b8187a331eb0a7cc1d9c7de701e9358d41ae6420ecc494c0c


Which relies on the classes library with hash:

6aeebc09c17f575e60a1809bbfde615acbb58ea1d573287d7f362614e1b0c457

------------------[Block Placement Test 1: Valid-Sized File]------------------
This test validates that a tapestry.Block object will accept a put() request
for a file that is actually of a size which would fit in the remaining size of
the block.


[PASS] The Block object indicated it accepted the file.


------------------[Block Placement Test 2: Check Full Flag]-------------------
This test validates that a tapestry.Block object will correctly set itself to
full when none of the files in the ops list are small enough to fit in the
remaining space.


[PASS] block.full returned True as expected.


------------------------[Block 'Meta' Method Test]----------------------------
A simplistic test of the block.meta() method, using known arguments on a
syntehtic block object to generate a RIFF file. Only validates that a RIFF was
created and placed - format validation is its own test.


[PASS] The output file appeared in the expected location.


----------------------------[Riff 'FIND' Test]--------------------------------
Loads a known-good sample RIFF into a RecoveryIndex object and then attempts to
use its find() method.


[PASS] The Find method returned the expected values based on the test RIFF


-------------------------[Riff Compliance Testing]----------------------------
A large number of small tests are used to approximate full JSON validation for
the RIFF file. This depends on the output from test_block_meta - if that test
failed than this test will also fail by default.


[PASS] The RIFF file output in an earlier test is compliant in all ways with
the RIFF Format Standard


-------------------------[Integrity Checker Test]-----------------------------
This test runs TaskCheckIntegrity for a known-good hash and ensures the logic
of the test is sound


[PASS] The TaskCheckIntegrity call passed successfully.


------------------------------[Compression Test]------------------------------
Very simplistically checks to make sure that the compression output file is
written to the filesystem. Most functionality of the compression itself is from
a standard library module, so no additional testing is necessary.


[PASS] The compressed tarball appeared where expected.


-----------------------------[Decompression Test]-----------------------------
Decompression verified both in terms of whether or not compression detection is
working, and whether or not the tarfile was changed as a result.


[PASS] A decompressed file was generated successfully and preserved the
original file's SHA256 Checksum


-------------------------------[Encryption Test]------------------------------
Triggers an instance of TaskEncrypt, and determines if it successfully
generates an output file. As the encrypted output would be different every
attempt even with the same keys used, it is non-trivial to test that the
encryption actually worked as designed. Reliance is instead placed on the
upstream package python-gnupg's testing.


[PASS] An encrypted file was returned.


-------------------------------[Decryption Test]------------------------------
A more robust test to follow on from TaskEncrypt's test. This decrypts the file
generated by TaskEncrypt, then verifies that it exists on the file system and
has the same checksum as the original file which was first encrypted.


[PASS] A decrypted file was output in the expected location and had the same
SHA256 checksum as the plaintext original.


--------------------------------[Signing Test]--------------------------------
Runs TaskSign against a test file and generates a signature. Simplistic test
makes sure the file exists - the signature validation is part of an upstream
component.


[PASS] The test generated a detatched signature file and placed it in the
expected location.


----------------------------[Unitary Tarring Test]----------------------------
Calls TaskTarBuild in order to add a single file to a single tarfile. Simply
validates that the tarfile was then created; a qualitative test of whether or
not the tarring was handled properly comes later.


[PASS] An output file was created in the expected location.


---------------------------[Unitary Untarring Test]---------------------------
Uses TaskTarUnpack against a file of known composition and uses checksums to
determine if the file was unpacked without modifying the contents.


[PASS] All expected files were created and verified to be in the correct state
using a SHA256 checksum.


--------------------[Tests of the Build Ops List Function]--------------------
Tests Tapestry's Build Ops List function using a hardcoded namespace object and
makes various comparisons in order to ensure that inclusive/default settings
are respected and that all else is as expected. This is several tests bundled -
the final lines of this test will be a message indicating either overall
passage or overall failure of the test.


-------------------[Tests of Build Recovery Index Function]-------------------
Calls the build_recovery_index using a source dictionary of known structure and
values, then makes comparisons of the output in order to ensure that BRI is
being faithful.


[PASS] The overall size of files in the index and estimation of which file is
largest were both as expected.


-------------------[Test the Media Retrieve Files Function]-------------------
This is a simple test that uses an expected pair of files to call the
media_retrieve_files function from tapestry, then inspects the filesystem to
see that those files were placed where expected. Finally, it examines the
returned value (made_index) to make sure it is an instance of a RecoveryIndex
object.


[PASS] MRF returned a valid Recovery Index and both the tapfile and
corresponding signiature were placed as expected in the filesystem


------------------------[Test the Configuration Parser]-----------------------
Generates a dummy namespace and populates it using parse_config and a control
tapestry.cfg-type file. A dictionary of known values for the control is then
compared against the namespace in order to validate that everything functioned
as designed.


--------------------------[Block Verification Test]---------------------------
Calls the verify_blocks function against a known-good block (as used in the MRF
test) in order to validate that both the expected types of data are returned
and that validation functions as intended.


[PASS] verify_blocks appears to work as designed.


Test test_build_ops_list rose an attribute error: is the right function defined?
Test test_parse_config rose an attribute error: is the right function defined?


===============================[END OF TESTING]===============================
 Tester Comments: 
 This test was run on 2021-02-05